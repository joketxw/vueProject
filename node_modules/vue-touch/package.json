{
  "_args": [
    [
      {
        "raw": "vue-touch@git://github.com/vuejs/vue-touch.git#next",
        "scope": null,
        "escapedName": "vue-touch",
        "name": "vue-touch",
        "rawSpec": "git://github.com/vuejs/vue-touch.git#next",
        "spec": "git://github.com/vuejs/vue-touch.git#next",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:vuejs/vue-touch.git#next",
          "sshUrl": "git+ssh://git@github.com/vuejs/vue-touch.git#next",
          "httpsUrl": "git+https://github.com/vuejs/vue-touch.git#next",
          "gitUrl": "git://github.com/vuejs/vue-touch.git#next",
          "shortcut": "github:vuejs/vue-touch#next",
          "directUrl": "https://raw.githubusercontent.com/vuejs/vue-touch/next/package.json"
        }
      },
      "C:\\Users\\yxh\\Desktop\\kd-pdd\\node_modules\\vue-3d-picker"
    ]
  ],
  "_from": "git://github.com/vuejs/vue-touch.git#next",
  "_id": "vue-touch@2.0.0-beta.4",
  "_inCache": true,
  "_location": "/vue-touch",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-touch@git://github.com/vuejs/vue-touch.git#next",
    "scope": null,
    "escapedName": "vue-touch",
    "name": "vue-touch",
    "rawSpec": "git://github.com/vuejs/vue-touch.git#next",
    "spec": "git://github.com/vuejs/vue-touch.git#next",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:vuejs/vue-touch.git#next",
      "sshUrl": "git+ssh://git@github.com/vuejs/vue-touch.git#next",
      "httpsUrl": "git+https://github.com/vuejs/vue-touch.git#next",
      "gitUrl": "git://github.com/vuejs/vue-touch.git#next",
      "shortcut": "github:vuejs/vue-touch#next",
      "directUrl": "https://raw.githubusercontent.com/vuejs/vue-touch/next/package.json"
    }
  },
  "_requiredBy": [
    "/vue-3d-picker"
  ],
  "_resolved": "git://github.com/vuejs/vue-touch.git#5229b018a0c71618851e98fc40c4697e42bf68b8",
  "_shasum": "8d6e229eb89cdcc1b8f20582b91ccd3244d644b1",
  "_shrinkwrap": null,
  "_spec": "vue-touch@git://github.com/vuejs/vue-touch.git#next",
  "_where": "C:\\Users\\yxh\\Desktop\\kd-pdd\\node_modules\\vue-3d-picker",
  "ava": {
    "require": [
      "babel-register",
      "./test/unit/helpers/browser-env.js"
    ],
    "files": [
      "test/unit/**/*.js",
      "!est/unit/helpers/*"
    ],
    "source": [
      "src/**/*"
    ]
  },
  "babel": {
    "presets": [
      "es2015-node6",
      "stage-2"
    ]
  },
  "bugs": {
    "url": "https://github.com/vuejs/vue-touch/issues"
  },
  "dependencies": {
    "hammerjs": "^2.0.8",
    "rollup-plugin-cleanup": "^0.1.4",
    "rollup-plugin-commonjs": "^7.0.0",
    "rollup-plugin-node-resolve": "^2.0.0"
  },
  "description": "Hammer.js based touch events plugin for Vue.js 2.0",
  "devDependencies": {
    "ava": "^0.17.0",
    "babel-preset-es2015-node6": "^0.4.0",
    "babel-preset-stage-2": "^6.18.0",
    "babel-register": "^6.18.0",
    "browser-env": "^2.0.19",
    "buble": "^0.15.1",
    "buble-loader": "^0.3.2",
    "css-loader": "^0.26.1",
    "hammerjs": "^2.0.8",
    "rollup": "^0.37.0",
    "rollup-plugin-buble": "^0.15.0",
    "sinon": "^1.17.6",
    "style-loader": "^0.13.1",
    "testcafe": "^0.11.1",
    "uglify-js": "^2.6.2",
    "vue": "^2.1.6",
    "webpack": "^2.1.0-beta.28",
    "webpack-dev-server": "beta"
  },
  "files": [
    "dist/vue-touch.js",
    "dist/vue-touch.js.map",
    "dist/vue-touch.min.js",
    "dist/hammer-ssr.js"
  ],
  "gitHead": "5229b018a0c71618851e98fc40c4697e42bf68b8",
  "homepage": "https://github.com/vuejs/vue-touch#readme",
  "license": "MIT",
  "main": "dist/vue-touch.js",
  "name": "vue-touch",
  "optionalDependencies": {},
  "peerDependecies": {
    "vue": "^2.0.0"
  },
  "readme": "# vue-touch\r\n\r\n> Touch events plugin for Vue.js\r\n> this is a BETA Release\r\n\r\nThis is a component wrapper for Hammer.js 2.0.\r\n\r\n## Install\r\n\r\n> This plugin requires Vue >= 2.0. For the Vue 1.\\*-compatible version, see the `1.0` branch\r\n\r\n\r\n### npm\r\n\r\nAvailable through npm as `vue-touch`. As this version is currently in BETA, you have to install with the `next` tag.\r\n\r\n```bash\r\nnpm install vue-touch@next\r\n```\r\n\r\n```Javascript\r\nvar VueTouch = require('vue-touch')\r\nVue.use(VueTouch, {name: 'v-touch'})\r\n```\r\nYou can pass an options object as the second argument, which at the moment accepts one property, `name`. It's used to define the name of the component that is registered with Vue and defaults to `'v-touch'`.\r\n\r\n#### Direct include\r\n\r\nYou can also directly include it with a `<script>` tag when you have Vue and Hammer.js already included globally. It will automatically install itself, and will add a global `VueTouch`.\r\n\r\n## Usage\r\n\r\nUsing the `<v-touch>` component\r\n\r\n``` html\r\n<!-- Renders a div element by default -->\r\n<v-touch v-on:swipeleft=\"onSwipeLeft\">Swipe me!</v-touch>\r\n\r\n<!-- Render as other elements with the 'tag' prop -->\r\n<v-touch tag=\"a\" v-on:tap=\"onTap\">Tap me!</v-touch>\r\n```\r\n\r\n## API\r\n\r\n### Component Events\r\n\r\nvue-touch supports all Hammer Events ot of the box, just bind a listener to the component with `v-on` and vue-touch will setup the Hammer Manager & Recognizer for you.\r\n\r\n|Recognizer|Events|Example|\r\n|---|----|----|\r\n|**Pan**|`pan`, `panstart`, `panmove`, `panend`, `pancancel`, <br>`panleft`, `panright`, `panup`, `pandown` |`v-on:panstart=\"callback\"`|\r\n|**Pinch**|`pinch`, `pinchstart`, `pinchmove`,`pinchend`, <br>`pinchcancel`, `pinchin`, `pinchout`| `v-on:pinchout=\"callback\"`|\r\n|**Press**|`press`, `pressup`|`v-on:pressup=\"callback\"`|\r\n|**Rotate**|`rotate`, `rotatestart`, `rotatemove`, <br>`rotateend`, `rotatecancel`, |`v-on:rotateend=\"callback\"`|\r\n|**Swipe**|`swipe`, `swipeleft`, `swiperight`, <br>`swipeup`, `swipedown`|`v-on:swipeleft=\"callback\"`|\r\n|**Tap**|`tap`|`v-on:tap=\"callback\"`|\r\n\r\n### Component Props\r\n\r\n\r\n#### Event Option Props\r\n\r\nYou can use the matching `*-options` props to pass Hammer options such as `direction` and `threshold`:\r\n\r\n**Example**\r\n``` html\r\n<!-- detect only horizontal pans with a threshold of 100 -->\r\n<v-touch\r\n  v-on:panstart=\"onPanStart\"\r\n  v-bind:pan-options=\"{ direction: 'horizontal', threshold: 100 }\">\r\n</v-touch>\r\n```\r\nThere's one prop per `Recognizer` available.\r\n\r\n|Recognizer|Prop|\r\n|----------|----|\r\n|**Pan**|`v-bind:pan-options`|\r\n|**Pinch**|`v-bind:pinch-options`|\r\n|**Rotate**|`v-bind:rotate-options`|\r\n|**Swipe**|`v-bind:swipe-options`|\r\n|**Tap**|`v-bind:tap-options`|\r\n\r\nSee [Hammer.js documentation](http://hammerjs.github.io/getting-started/) for all available options for events.\r\n\r\n**About Directions:**\r\n\r\nIn the above example, not that we used `direction: 'horizontal'`. Hammer's directions interface is a little ugly (Hammer['DIRECTION_HORIZONTAL']).\r\n\r\nVueTouch keeps that from you and accepts simple strings as directions:\r\n\r\n```javascript\r\nconst directions = ['up', 'down', 'left', 'right', 'horizontal', 'vertical', 'all']\r\n```\r\n\r\n#### The 'enabled' Prop\r\n\r\n|Prop|allowed Values|\r\n|----|--------------|\r\n|enabled| Boolean or Object (see below)|\r\n\r\nYou can enable and disable all or some of the event recognizers via the `enabled` prop:\r\n\r\n**Example**\r\n```html\r\n<v-touch\r\n  <!-- enable all recognizers -->\r\n  v-bind:enabled=\"true\"\r\n\r\n  <!-- disable all recognizers -->\r\n  v-bind:enabled=\"false\"\r\n\r\n  <!-- pass an object to enable and disable recognizers individually -->\r\n  v-bind:enabled=\"{ pinch: true, rotate: false }\"\r\n\r\n></v-touch>\r\n```\r\n\r\n#### The 'options' prop\r\n\r\nHammer accepts a few general options that are normally passed when creating a Hammer instance with `new Hammer()` or `new Hammer.Manager()`.\r\n\r\nIn vue-touch, you can pass those options via the `options` prop:\r\n\r\n|Prop|allowed Values|\r\n|----|--------------|\r\n|options| https://hammerjs.github.io/api/#hammer.defaults |\r\n\r\n**Example**\r\n```html\r\n<v-touch options=\"{ touchAction: 'pan' }\" />\r\n```\r\n\r\n\r\n### Public Component Methods\r\n\r\nThe component exposes a few convenience methods to enable and disable Recognizers, and check if a recognizer is enabled:\r\n\r\n|Method|Explanation|\r\n|------|-----------|\r\n|`disable(event)`|disable event's recognizer|\r\n|`enable(event)`|disable event's recognizer|\r\n|`toggle(event)`|Toogle the 'enable' state of event's  recognizer|\r\n|`disableAll()`|disable all Recognizers|\r\n|`enableAll()`|enable all Recognizers|\r\n|`isEnabled(event)`|returns `true` if Recognizer for `event` is currently enabled|\r\n\r\n```html\r\n<template>\r\n  <v-touch ref=\"tapper\" @tap=\"callback\"></v-touch>\r\n</template>\r\n<script>\r\n  export default {\r\n    methods: {\r\n      disableTap() {\r\n        this.$refs.tapper.disable('tap')\r\n      },\r\n      enableTap() {\r\n        this.$refs.tapper.enable('tap')\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n### Plugin Methods\r\n\r\n#### Global Event Options\r\n\r\nYou can define global defaults for the builtin recognizers\r\n\r\n``` js\r\n// change the threshold for all swipe recognizers\r\nVueTouch.config.swipe = {\r\n  threshold: 200\r\n}\r\n```\r\n\r\n#### Registering Custom Events\r\n\r\nYou can register custom events with vue-touch.\r\n\r\n``` js\r\n// example registering a custom doubletap event.\r\n// the `type` indicates the base recognizer to use from Hammer\r\n// all other options are Hammer recognizer options.\r\nVueTouch.registerCustomEvent('doubletap', {\r\n  type: 'tap',\r\n  taps: 2\r\n})\r\n```\r\n> **Warning**: You have to register your custom events *before* installing the plugin with `Vue.use(VueTouch)`.\r\nVueTouch will log a warning to the console (in dev mode) if you try to do that afterwards, and the event will not work.\r\n\r\nThis will make it possible to listen for this event on `<v-touch>`. Additionally, just like for \"normal\" events, you can pass further options as the corresponding prop.\r\n\r\n``` html\r\n<v-touch v-on:doubletap=\"onDoubleTap\"></v-touch>\r\n<!-- with local options -->\r\n<v-touch v-on:doubletap=\"onDoubleTap\" v-bind:doubletap-options=\"{intervall: 250}\"></v-touch>\r\n```\r\n\r\nSee `/example` for a multi-event demo. To build it, run `npm install && npm run build`.\r\n\r\n## Server-Side Rendering (SSR)\r\n\r\nAs of the moment of this writing, requiring HammerJS in a non-browser-environment (like during the build process of your SSR bundle) throws an error ([hammerjs/hammerjs#1060](https://github.com/hammerjs/hammer.js/issues/1060)).\r\n\r\nThe easiest fix to that is to use a webpack alias (in your **server-side(!)** webpack copnfiguration) to replace the hammerjs package with a module that just exports a stub, i.e. an empty object. vue-touch comes with such a module, called `hammer-ssr.js`\r\n```JavaScript\r\nalias: {\r\n  'hammerjs$': 'vue-touch/dist/hammer-ssr.js'\r\n}\r\n```\r\n\r\nOnce this issue has been resolved HammerJS, this alias is no longer nessessary and can be removed.\r\n\r\nThe `<v-touch>` component itself will never try to setup any Hamer Manangers or Recognizers if it detects that it is running in an SSR environment (seeVue.js API docs for [vm.$isServer](https://vuejs.org/v2/api/#vm-isServer)). The component will only render a normal `<div>` element (or whatever element you defined with the `tag` prop).\r\n\r\n## Known Limitations & Bugs\r\n\r\n* Curently, changing `-options` props will not change recogizer settings. The initial values will stay in place until the component is re-created.\r\n\r\n## TODO\r\n\r\n* [ ] Support updating recognizer options when props change.\r\n* [ ] Find out if e2e tests are possible(contribution welcome)\r\n\r\n## License\r\n\r\n[MIT](http://opensource.org/licenses/MIT)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vue-touch.git"
  },
  "scripts": {
    "build": "rollup -m -c build/rollup.config.prod.js && uglifyjs dist/vue-touch.js -c -m > dist/vue-touch.min.js && cp src/hammer-ssr.js dist/",
    "dev": "node build/devserver.js",
    "test": "npm run test:unit:dev && npm run test:unit:prod",
    "test:unit:dev": "NODE_ENV=development node_modules/.bin/ava --verbose",
    "test:unit:prod": "NODE_ENV=production npm run build && node_modules/.bin/ava --verbose",
    "test:watch": "NODE_ENV=development node_modules/.bin/ava --watch --verbose"
  },
  "version": "2.0.0-beta.4"
}
